services:

  redis:
    image: redis:latest
    restart: always
    # Configure Redis as the lru-cache
    command: [ "redis-server", "--maxmemory", "500mb", "--maxmemory-policy", "allkeys-lru" ]
    expose:
      - 6379

  db:
    image: bitnami/postgresql:12
    user: root
    restart: always
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/bitnami/postgresql
#      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
#      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRESQL_POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRESQL_DATABASE=${POSTGRES_DB?Variable not set}
      - POSTGRESQL_USERNAME=${POSTGRES_USER?Variable not set}
      - POSTGRESQL_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repluser
      - POSTGRESQL_REPLICATION_PASSWORD=replpass

  raw_dwh_layer:
    image: bitnami/postgresql:12
    user: root
    restart: always
    ports:
      - "5434:5434"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - replica-data:/bitnami/postgresql
    env_file:
      - .env
    depends_on:
      - db
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRESQL_POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRESQL_DATABASE=${POSTGRES_DB?Variable not set}
      - POSTGRESQL_USERNAME=${POSTGRES_USER?Variable not set}
      - POSTGRESQL_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repluser
      - POSTGRESQL_REPLICATION_PASSWORD=replpass
      - POSTGRESQL_MASTER_HOST=db
      - POSTGRESQL_PORT_NUMBER=5434
      - POSTGRESQL_MASTER_PORT_NUMBER=5432

  redis_cache:
    image: redis_cache
    build:
      context: ./redis_cache
    networks:
      - default

  prestart:
    build:
      context: first_service
    networks:
      - default
    depends_on:
      db:
        condition: service_healthy
      redis_cache:
        condition: service_started
      external_apis:
        condition: service_started
    command: bash scripts/prestart.sh
    volumes:
      - ./first_service/app/alembic/versions:/app/app/alembic/versions
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}

  first_service:
    ports:
      - "8000:8000"
    networks:
      - default
    depends_on:
      db:
        condition: service_healthy
      redis_cache:
        condition: service_started
      external_apis:
        condition: service_started
    volumes:
      - ./first_service/htmlcov:/app/htmlcov
      # For changing request's policy to services on flight
      - ./first_service/data_sources_config.json:/app/data_sources_config.json
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 10s
      timeout: 5s
      retries: 5

    build:
      context: ./first_service

  second_service:
    ports:
      - "8001:8001"
    networks:
      - default
    depends_on:
      db:
        condition: service_healthy
      redis_cache:
        condition: service_started
      external_apis:
        condition: service_started
    volumes:
      - ./second_service/htmlcov:/app/htmlcov
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8001/api/v1/utils/health-check/" ]
      interval: 10s
      timeout: 5s
      retries: 5

    build:
      context: ./second_service
  
  external_apis:
    image: external_apis
    build:
      context: ./external_apis
    ports: 
      - "3629:3629"
    networks:
      - default

  postgres-marts:
    image: postgres:13
    environment:
      POSTGRES_USER: marts
      POSTGRES_PASSWORD: marts
      POSTGRES_DB: marts
    ports:
      - "5462:5432"
    volumes:
      - marts-db-volume:/var/lib/postgresql/data
      - ./psql:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "marts" ]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

volumes:
  app-db-data:
  replica-data:
  marts-db-volume: